// <auto-generated />
using GitAutomation.EFCore.BranchingModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace GitAutomation.SqlServer.BranchingMigrations
{
    [DbContext(typeof(BranchingContext))]
    partial class BranchingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GitAutomation.EFCore.BranchingModel.BranchGroup", b =>
                {
                    b.Property<string>("GroupName")
                        .HasColumnName("groupname")
                        .HasMaxLength(255);

                    b.Property<string>("BranchType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("branchtype")
                        .HasDefaultValueSql("('Feature')")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<bool>("RecreateFromUpstream")
                        .HasColumnName("recreatefromupstream");

                    b.Property<string>("UpstreamMergePolicy")
                        .HasColumnName("upstreammergepolicy");

                    b.HasKey("GroupName");

                    b.ToTable("branchgroup");
                });

            modelBuilder.Entity("GitAutomation.EFCore.BranchingModel.BranchStream", b =>
                {
                    b.Property<string>("DownstreamBranch")
                        .HasColumnName("downstreambranch")
                        .HasMaxLength(255);

                    b.Property<string>("UpstreamBranch")
                        .HasColumnName("upstreambranch")
                        .HasMaxLength(255);

                    b.HasKey("DownstreamBranch", "UpstreamBranch");

                    b.HasIndex("UpstreamBranch");

                    b.ToTable("branchstream");
                });

            modelBuilder.Entity("GitAutomation.EFCore.BranchingModel.BranchStream", b =>
                {
                    b.HasOne("GitAutomation.EFCore.BranchingModel.BranchGroup", "DownstreamBranchNavigation")
                        .WithMany("UpstreamBranchConnections")
                        .HasForeignKey("DownstreamBranch")
                        .HasConstraintName("FK_BranchStream_ToDownstreamBranch");

                    b.HasOne("GitAutomation.EFCore.BranchingModel.BranchGroup", "UpstreamBranchNavigation")
                        .WithMany("DownstreamBranchConnections")
                        .HasForeignKey("UpstreamBranch")
                        .HasConstraintName("FK_BranchStream_ToUpstreamBranch");
                });
#pragma warning restore 612, 618
        }
    }
}
